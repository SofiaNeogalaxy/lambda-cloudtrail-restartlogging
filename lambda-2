import boto3
import logging
import os
import botocore.session
from botocore.exceptions import ClientError
session = botocore.session.get_session()

# Configure lgging
logger=logging.getLogger(__name__)
logger.setLevel(logging.INFO)

def handler(event, context):
    logger.setLevel(logging.DEBUG)
    event_name = event['eventName']

# Lambda function invoked if AWS CloudTrail logging is detected as stopped.
# The function automatically re-enables AWS CloudTrail logging 
# and publishes a notification to an SNS Topic.


# Get CloudTrail logging Status
def get_cloudtrail_status(trailname):
    client = boto3.client('cloudtrail')
    response = client.get_trail_status(Name=trailname)

    if response['ResponseMetadata']['HTTPStatusCode'] == 200:
        response = response['IsLogging']
        logger.info("Status of CloudTrail logging for %s - %s" % (trailname, response))
    else:
        logger.error("Error gettingCloudTrail logging status for %s - %s" % (trailname, response))
        
    return response


# Enable CloudTrail logging
def enable_cloudtrail(trailname):
    client = boto3.client('cloudtrail')
    response = client.start_logging(Name=trailname)

    if response['ResponseMetadata']['HTTPStatusCode'] == 200:
        logger.info("Response on enable CloudTrail logging for %s - %s" % (trailname, response))
    else:
        logger.error("Error enabling CloudTrail logging for %s - %s" % (trailname, response))
    
    return response



# Lambda entry point
def handler(event, context):

    # Consider setting logging to DEBUG - this function should be rarely invoked, but carefully logged
    logger.setLevel(logging.INFO)

    # log the start of the remediation response
    logger.info("Starting automatic CloudTrail remediation response")
    
    # description contains useful details to be sent to security operations
    description = event['detail']

    # If debug logging set, write out details to logs for better audit path
    logger.debug("Event is-- %s" %event)
    logger.debug("snsARN is-- %s" %snsARN)
       
    # Enabling the AWS CloudTrail logging
    try:
        response = None
        # extract trail ARN by parsing the incoming CloudTrail event (in JSON format)
        if 'name' in event['eventName']:
            trailARN = event['requestParameters']['name']
            response = get_cloudtrail_status(trailARN)
            logger.debug("trailARN is--- %s" %trailARN)
        if response == False:
            response = enable_cloudtrail(trailARN)
            if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                message = "CloudTrail logging restarted automatically for trail - " + trailARN + "\n \n Event:" + str(description)
                logger.info("Completed automatic CloudTrail remediation response for %s - %s" % (trailARN, response))
       
    except ClientError as e:
        message = "%s \n \n %s" % (e, event)
        logger.error("%s, %s" % (e, event))
